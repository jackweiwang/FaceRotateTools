from extract_feature import umeyama
import numpy as np
import cv2


avg_landmarks1 = [[ 11.16157722,  35.04005432],[ 10.3120451,  40.88643312],[ 10.4341799 ,  46.52265024], \
                 [ 10.33940053 , 52.90115404],[ 10.19434214,  58.50343513],[ 10.88163173,  64.7166214 ], \
                 [ 11.60588729 , 70.72792721],[ 12.75707185,  76.40999317],[ 14.66294575,  82.06072998], \
                 [ 17.3023169  , 87.40611267],[ 20.35318279,  92.67590618],[ 23.64527082,  96.93415451], \
                 [ 28.10702515 ,101.37395573],[ 32.49724913, 104.72038078],[ 37.20364857, 107.30106068], \
                 [ 42.94672394 ,109.61700153],[ 48.9967556 , 110.18731499],[ 55.38176489, 110.90878677], \
                 [ 62.1397934  ,109.89330959],[ 68.72352219, 108.35036373],[ 75.07546329, 105.63806534], \
                 [ 80.30562973 ,102.09128189],[ 85.55260563,  98.1809721 ],[ 90.41200256,  93.86814976], \
                 [ 94.25715733 , 88.96641541],[ 97.36036587,  83.14059448],[100.21552467,  76.74595547], \
                 [102.11425972 , 71.13724899],[103.33477497,  64.77334499],[104.23760605,  57.49779129], \
                 [105.048172   , 51.42543602],[105.60050106,  44.87682486],[105.44326782,  38.32646465], \
                 [ 14.04513955 , 23.01661825],[ 19.66606426,  16.82535172],[ 25.78498602,  15.65951729], \
                 [ 32.25849533 , 16.61641335],[ 39.13670015,  18.47780275],[ 38.97366905,  23.06344342], \
                 [ 32.52858496 , 21.20955086],[ 25.8901937 ,  20.5019846 ],[ 19.36247253,  20.87993717], \
                 [ 57.78486061 , 17.34335756],[ 66.57570934,  15.41909623],[ 75.22724915,  14.69359565], \
                 [ 83.63601971 , 16.81667161],[ 91.21881008,  24.86547065],[ 83.43245029,  21.16437292], \
                 [ 74.99244404 , 19.34970188],[ 66.31280613,  20.01640439],[ 58.08171654,  22.10807943], \
                 [ 46.87928724 , 35.9918952 ],[ 45.74511576,  43.65321875],[ 44.92184925,  51.19004679], \
                 [ 44.14130068 , 58.77462959],[ 37.39316225,  65.51829529],[ 41.77983475,  65.93622875], \
                 [ 45.91147804 , 65.95705032],[ 51.62253332,  65.17629814],[ 56.86371803,  65.10416031], \
                 [ 19.01500463 , 36.5052247 ],[ 22.87126112,  33.84470987],[ 26.88917017,  32.19824362], \
                 [ 32.77955532 , 33.48791933],[ 37.58116722,  37.51973057],[ 32.76150084,  39.7241168 ], \
                 [ 26.88931704 , 40.04978514],[ 22.57803845,  38.89310312],[ 60.977911  ,  37.49875879], \
                 [ 65.53620625 , 32.93162823],[ 71.37166023,  31.69103575],[ 77.42091084,  32.74531221], \
                 [ 82.91203117 , 36.04791784],[ 77.75593185,  38.80349827],[ 72.31110096,  39.82257366], \
                 [ 66.37699318 , 39.36107111],[ 30.81921339,  80.24351883],[ 35.24908447,  78.12947178], \
                 [ 41.61115599 , 76.18006802],[ 46.16417408,  76.2559576 ],[ 51.67289162,  76.49878693], \
                 [ 60.93560028 , 77.33931351],[ 70.06077576,  80.94203281],[ 63.46212673,  85.0451107 ], \
                 [ 55.80537271 , 87.16272259],[ 47.82964277,  87.88524246],[ 40.89038181,  87.17315674], \
                 [ 35.00246    , 84.73577118],[ 31.76078701,  80.79433918],[ 39.10041094,  80.69637299], \
                 [ 46.59142685 , 80.92957592],[ 57.42677498,  80.89179802],[ 68.43568516,  80.98115921], \
                 [ 57.50160313 , 81.00589275],[ 47.07729578,  81.36095428],[ 39.7649188 ,  81.35240936], \
                 [ 27.58292603 , 36.08826256],[ 71.3759861 ,  35.38837671]]





def transformation_from_points(points1, points2):
    points1 = points1.astype(np.float64)
    points2 = points2.astype(np.float64)
    c1 = np.mean(points1, axis=0)
    c2 = np.mean(points2, axis=0)
    points1 -= c1
    points2 -= c2
    s1 = np.std(points1)
    s2 = np.std(points2)
    points1 /= s1
    points2 /= s2
    U, S, Vt = np.linalg.svd(points1.T * points2)
    R = (U * Vt).T
    return np.vstack([np.hstack(((s2 / s1) * R,c2.T - (s2 / s1) * R * c1.T)),np.matrix([0., 0., 1.])])

def warp_im(tar_landmarks):


    pts1 = np.float64(np.matrix([[point[0], point[1]] for point in tar_landmarks]))
    pts2 = np.float64(np.matrix([[point[0], point[1]] for point in avg_landmarks1]))
    M = transformation_from_points(pts1, pts2)
    #dst = cv2.warpAffine(img_im, M[:2], (img_im.shape[1], img_im.shape[0]))
    return M


def landmarks_match_mtcnn(src_im, src_landmarks, tar_landmarks): 
    """
    umeyama(src, dst, estimate_scale), 
    src/dst landmarks coord. should be (y, x)
    """
    src_size = src_im.shape
    src_tmp = [(int(xy[1]), int(xy[0])) for xy in src_landmarks]
    dst_tmp = [(int(xy[1]), int(xy[0])) for xy in tar_landmarks]
    #M = cv2.getAffineTransform(src_tmp,dst_tmp)
    M = umeyama(np.array(src_tmp), np.array(dst_tmp), True)[0:2]
    result = cv2.warpAffine(src_im, M, (src_size[1], src_size[0]), borderMode=cv2.BORDER_REPLICATE) 
    return result

def alignlandmarks(src_im, M):
    """
    umeyama(src, dst, estimate_scale),
    src/dst landmarks coord. should be (y, x)
    """
    src_size = src_im.shape
    result = cv2.warpAffine(src_im, M[:2], (src_size[1], src_size[0]))
    return result


def evalution_align(tar_landmarks):

    pts1 = np.array(tar_landmarks)
    pts2 = np.array(avg_landmarks1)

    temp, error = (pts1 - pts2) ** 2, 0.

    for i in range(98):
        error += np.sqrt(temp[i][0] + temp[i][1])
    return error

def dealignlandmarks(src_im, M):
    """
    umeyama(src, dst, estimate_scale),
    src/dst landmarks coord. should be (y, x)
    """
    MT = np.linalg.inv(M)
    src_size = src_im.shape
    result = cv2.warpAffine(src_im, MT[:2], (src_size[1], src_size[0]))
    return result